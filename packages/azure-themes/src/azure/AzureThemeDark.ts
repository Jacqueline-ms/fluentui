import { createTheme, ITheme } from 'office-ui-fabric-react';
import { CommonSemanticColors, DarkSemanticColors } from './AzureColors';
import { IExtendedSemanticColors } from './IExtendedSemanticColors';
import { FontSizes } from './AzureType';
import * as StyleConstants from './Constants';

const darkExtendedSemanticColors: Partial<IExtendedSemanticColors> = {
  calText: '#ffffff',
  bodyBackground: DarkSemanticColors.background,
  bodyText: DarkSemanticColors.text.body,
  bodyDivider: CommonSemanticColors.dividers.lineSeparator,
  buttonBackground: DarkSemanticColors.secondaryButton.rest.background,
  buttonBackgroundChecked: DarkSemanticColors.secondaryButton.pressed.background,
  buttonBackgroundCheckedHovered: DarkSemanticColors.secondaryButton.hover.background,
  buttonBackgroundDisabled: 'rgb(50, 49, 48)',
  buttonBackgroundHovered: DarkSemanticColors.secondaryButton.hover.background,
  buttonBackgroundHoveredDefault: 'rgb(37, 36, 35)',
  buttonBackgroundPressed: 'rgb(41, 40, 39)',
  buttonBorderColor: 'rgb(151, 150, 147)',
  buttonBorderHovered: 'rgb(151, 150, 147)',
  buttonText: '#ffffff',
  buttonTextChecked: DarkSemanticColors.secondaryButton.pressed.border,
  buttonTextCheckedHovered: DarkSemanticColors.secondaryButton.hover.border,
  buttonTextDisabled: 'rgb(121, 119, 117)',
  buttonTextHovered: DarkSemanticColors.secondaryButton.hover.border,
  buttonTextPressed: DarkSemanticColors.secondaryButton.pressed.border,
  checkboxBorder: 'rgb(243, 242, 241)',
  checkboxBorderHover: '',
  checkboxBorderChecked: '',
  checkmarkColorHover: 'rgb(161, 159, 157)',
  checkboxBorder2: 'rgb(40, 153, 245)',
  checkboxBorderDisabled: 'rgb(72, 70, 68)',
  checkboxCheckedDisabled: 'rgb(72, 70, 68)',
  checkboxCheckedMarkDisabled: '#000000',
  checkboxIndeterminateBackground: 'transparent',
  checkMarkFill: 'rgb(27, 26, 25)',
  controlGroupBorder: 'rgb(243, 242, 241)',
  checkBoxselectedBorderHover: 'rgb(108, 184, 246)',
  groupChoiceFill: '#0078D4',
  contextMenuBackground: '#000000',
  disabledBackground: CommonSemanticColors.backgrounds.disabled,
  disabledToggleBackground: 'transpanret',
  disabledBodyText: 'rgb(121, 119, 117)',
  disabledIconColor: 'rgb(72, 70, 68)',
  dropdownBorder: 'rgb(161, 159, 157)',
  dropdownBorderHover: 'rgb(243, 242, 241)',
  errorBackground: DarkSemanticColors.controlOutlines.error,
  errorText: DarkSemanticColors.text.error,
  focusBorder: '#4894fe',
  iconButtonColor: '#0078D4',
  iconButtonDisabledColor: '#A19F9D',
  iconHoveredColor: '#106EBE',
  iconPressedColor: 'rgb(108, 184, 246)',
  inputBackground: DarkSemanticColors.background,
  inputText: DarkSemanticColors.text.value,
  inputBorder: CommonSemanticColors.textControlOutline.rest,
  inputBorderHovered: CommonSemanticColors.textControlOutline.hover,
  inputPlaceholderText: DarkSemanticColors.text.placeholder,
  link: '#0078D4',
  linkHovered: '#004578',
  listBackground: DarkSemanticColors.background,
  listHeaderBackgroundPressed: DarkSemanticColors.item.hover,
  listItemBackgroundChecked: DarkSemanticColors.item.select,
  listItemBackgroundCheckedHovered: DarkSemanticColors.item.select,
  listItemBackgroundHovered: DarkSemanticColors.item.hover,
  listText: DarkSemanticColors.text.body,
  menuItemBackgroundHovered: '#373737',
  menuItemBackgroundPressed: 'rgba(128,128,128,.6)',
  primaryButtonBackground: 'rgb(40, 153, 245)',
  primaryButtonBackgroundDisabled: 'rgb(50, 49, 48)',
  primaryButtonBackgroundHovered: 'rgb(58, 160, 243)',
  primaryButtonBackgroundPressed: 'rgb(108, 184, 246)',
  primaryButtonBorder: '#4894fe',
  primaryButtonText: 'rgb(27, 26, 25)',
  primaryButtonTextDisabled: 'rgb(121, 119, 117)',
  primaryButtonTextHovered: 'rgb(27, 26, 25)',
  primaryButtonTextPressed: DarkSemanticColors.primaryButton.pressed.text,
  textFieldBorder: '#8A8886',
  textFieldBorderHover: '#323130',
  textFieldBorderActiveFocus: '#0078D4',
  thumbDisabled: 'rgb(50, 49, 48)',
  thumbNotCheck: 'rgb(161, 159, 157)',
  thumbDisabledNotChecked: 'rgb(72, 70, 68)',
  thumbEnabledChecked: 'rgb(27, 26, 25)',
  variantBorder: CommonSemanticColors.dividers.lineSeparator,
  // extended
  controlAccent: DarkSemanticColors.controlOutlines.accent,
  controlOutline: DarkSemanticColors.controlOutlines.rest,
  controlOutlineDisabled: 'rgb(72, 70, 68)',
  controlOutlineHovered: 'rgb(108, 184, 246)',
  labelText: DarkSemanticColors.text.label,
  statusErrorBackground: DarkSemanticColors.statusBar.error,
  statusErrorText: DarkSemanticColors.text.body,
  statusErrorIcon: CommonSemanticColors.icons.error,
  statusInformationBackground: DarkSemanticColors.statusBar.information,
  statusInformationText: DarkSemanticColors.text.body,
  statusInformationIcon: CommonSemanticColors.icons.information,
  statusSuccessBackground: DarkSemanticColors.statusBar.okay,
  statusSuccessText: DarkSemanticColors.text.body,
  statusSuccessIcon: CommonSemanticColors.icons.okay,
  statusWarningBackground: DarkSemanticColors.statusBar.warning,
  statusWarningText: DarkSemanticColors.text.body,
  statusWarningIcon: CommonSemanticColors.icons.warning,
};

export const AzureThemeDark: ITheme = createTheme({
  fonts: {
    medium: {
      fontFamily: StyleConstants.fontFamily,
      fontSize: FontSizes.size12,
    },
  },
  palette: {
    themePrimary: DarkSemanticColors.controlOutlines.accent,
    neutralPrimary: DarkSemanticColors.text.body,
    neutralDark: DarkSemanticColors.text.body,
    neutralLighter: DarkSemanticColors.shimmer.secondary, // shimmer elements
    neutralLight: DarkSemanticColors.shimmer.primary, // shimmer elements
    neutralLighterAlt: DarkSemanticColors.item.hover, // nav highlight
    neutralQuaternaryAlt: DarkSemanticColors.item.select, // expand button on list controls
    neutralSecondary: DarkSemanticColors.text.label, // persona,
    white: DarkSemanticColors.background, // shimmer elements
  },
  semanticColors: darkExtendedSemanticColors,
});
